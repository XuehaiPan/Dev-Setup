{
    //! Editor settings */
    //* Editor */
    "editor.fontSize": 13,
    "editor.fontFamily": "Menlo, Monaco, Consolas, 'Courier New', 'Microsoft YaHei Mono', monospace, 'DejaVuSansM Nerd Font Mono'",
    "editor.fontWeight": 600,
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "editor.lineNumbers": "on",
    "editor.renderLineHighlight": "line",
    "editor.trimAutoWhitespace": true,
    "editor.renderWhitespace": "selection",
    "editor.useTabStops": true,
    "editor.autoIndent": "full",
    "editor.detectIndentation": true,
    "editor.folding": true,
    "editor.foldingStrategy": "auto",
    "editor.semanticHighlighting.enabled": true,
    "editor.guides.bracketPairs": true,
    "editor.guides.bracketPairsHorizontal": true,
    "editor.guides.highlightActiveBracketPair": true,
    "editor.guides.indentation": false,
    "editor.guides.highlightActiveIndentation": true,
    "editor.bracketPairColorization.enabled": true,
    "editor.wordWrapColumn": 120,
    "editor.rulers": [
        80,
        100,
        120,
        140
    ],
    "editor.cursorStyle": "line",
    "editor.cursorSmoothCaretAnimation": "explicit",
    "editor.smoothScrolling": true,
    "editor.mouseWheelZoom": false,
    "editor.multiCursorModifier": "ctrlCmd",
    "editor.occurrencesHighlight": "singleFile",
    "editor.selectionHighlight": true,
    "editor.parameterHints.enabled": true,
    "editor.matchBrackets": "always",
    "editor.links": true,
    "editor.minimap.enabled": true,
    "editor.minimap.maxColumn": 120,
    "editor.minimap.renderCharacters": true,
    "editor.minimap.size": "proportional",
    "editor.formatOnType": false,
    "editor.formatOnPaste": false,
    "editor.formatOnSave": true,
    "editor.formatOnSaveMode": "modifications",
    "editor.codeActionsOnSave": {
        "source.fixAll": "explicit"
    },
    "editor.inlineSuggest.enabled": true,
    "editor.suggestSelection": "first",
    "editor.snippetSuggestions": "inline",
    "editor.suggest.filterGraceful": true,
    "editor.quickSuggestions": {
        "other": true,
        "comments": true,
        "strings": true
    },
    "diffEditor.ignoreTrimWhitespace": false,
    "diffEditor.renderIndicators": true,
    "diffEditor.renderSideBySide": true,
    "diffEditor.maxComputationTime": 10000,
    "workbench.colorTheme": "Monokai",
    "workbench.iconTheme": "material-icon-theme",
    "workbench.startupEditor": "none",
    "workbench.sideBar.location": "left",
    "workbench.enableExperiments": false,
    "workbench.editor.showIcons": true,
    "workbench.editor.showTabs": "multiple",
    "workbench.editor.closeEmptyGroups": true,
    "workbench.editor.closeOnFileDelete": false,
    "workbench.editor.enablePreview": true,
    "workbench.editor.highlightModifiedTabs": true,
    "workbench.fontAliasing": "auto",
    "workbench.settings.editor": "ui",
    "workbench.settings.useSplitJSON": true,
    "workbench.colorCustomizations": {
        "editorBracketHighlight.foreground1": "#ffd700",
        "editorBracketHighlight.foreground2": "#ff1491",
        "editorBracketHighlight.foreground3": "#00bfff",
        "editorBracketHighlight.foreground4": "#ff8c00",
        "editorBracketHighlight.foreground5": "#32cd32",
        "editorBracketHighlight.foreground6": "#ee82ee",
        "editorBracketHighlight.unexpectedBracket.foreground": "#ffffff"
    },
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook"
    },
    "workbench.editorLargeFileConfirmation": 64,
    "workbench.localHistory.enabled": true,
    "workbench.localHistory.maxFileSize": 1024,
    "workbench.localHistory.mergeWindow": 60,

    //* Window */
    "window.closeWhenEmpty": false,
    "window.newWindowDimensions": "maximized",
    "window.openFilesInNewWindow": "default",
    "window.openFoldersInNewWindow": "default",
    "window.titleBarStyle": "custom",
    "window.title": "${dirty}${activeEditorMedium}${separator}${rootName}",

    //* Breadcrumb Navigation */
    "breadcrumbs.enabled": true,
    "breadcrumbs.filePath": "on",
    "breadcrumbs.symbolPath": "on",

    //* Files */
    "files.autoGuessEncoding": false,
    "files.encoding": "utf8",
    "files.eol": "auto",
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 1000,
    "files.insertFinalNewline": true,
    "files.trimFinalNewlines": true,
    "files.trimTrailingWhitespace": true,
    "files.associations": {
        ".flake8": "properties",
        ".coveragerc": "properties",
        "*requirements*.txt": "pip-requirements",
        "*requirements*.in": "pip-requirements",
        "Makefile.*": "makefile",
        ".clang-format": "yaml",
        ".clang-tidy": "yaml"
    },
    "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true,
        "**/Thumbs.db": true,
        "**/.classpath": true,
        "**/.factorypath": true,
        "**/.project": true,
        "**/.settings": true,
        "**/.idea": true,
        "**/.history": true,
        "**/*.py[cod]": true,
        "**/__pycache__": true,
        "**/*_cache/": true
    },

    //* File Explorer */
    "explorer.autoReveal": true,
    "explorer.confirmDragAndDrop": true,
    "explorer.enableDragAndDrop": true,

    //* Search */
    "search.searchOnType": true,
    "search.showLineNumbers": true,
    "search.smartCase": true,
    "search.collapseResults": "alwaysExpand",
    "search.useReplacePreview": true,
    "search.useGlobalIgnoreFiles": false,
    "search.useIgnoreFiles": true,
    "search.exclude": {
        "**/node_modules": true,
        "**/bower_components": true,
        "**/*.code-search": true,
        "**/cmake-build*": true,
        "**/.history": true
    },

    //* Outline */
    "outline.icons": true,
    "outline.problems.badges": true,
    "outline.problems.colors": true,
    "outline.problems.enabled": true,

    //* Debug */
    "debug.inlineValues": "on",
    "debug.showVariableTypes": true,
    "debug.openExplorerOnEnd": true,

    //* Integrated Terminal */
    "terminal.explorerKind": "integrated",
    "terminal.integrated.fontSize": 14,
    "terminal.integrated.fontFamily": "'DejaVuSansM Nerd Font Mono', 'DejaVuSansM NFM', Menlo, 'Microsoft YaHei Mono'",
    "terminal.integrated.tabs.enabled": true,
    "terminal.integrated.showExitAlert": true,
    "terminal.integrated.confirmOnExit": "hasChildProcesses",
    "terminal.integrated.sendKeybindingsToShell": true,
    "terminal.integrated.cursorBlinking": true,
    "terminal.integrated.enableVisualBell": true,
    "terminal.integrated.cursorStyle": "block",
    "terminal.integrated.enableImages": true,
    "terminal.integrated.inheritEnv": false,
    "terminal.integrated.scrollback": 100000,
    "terminal.integrated.detectLocale": "auto",
    "terminal.integrated.defaultProfile.linux": "zsh",
    "terminal.integrated.defaultProfile.osx": "zsh",
    "terminal.integrated.defaultProfile.windows": "PowerShell",
    "terminal.integrated.profiles.linux": {
        "zsh": {
            "path": "/usr/bin/zsh"
        }
    },
    "terminal.integrated.profiles.osx": {
        "zsh": {
            "path": "/bin/zsh",
            "args": [
                "-l"
            ]
        }
    },

    //* External Terminal */
    "terminal.external.linuxExec": "x-terminal-emulator",
    "terminal.external.osxExec": "iTerm.app",
    "terminal.external.windowsExec": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",

    //* Extensions */
    "extensions.autoCheckUpdates": true,
    "extensions.autoUpdate": true,
    "extensions.closeExtensionDetailsOnViewChange": true,

    //* Update */
    "update.mode": "default",

    //! Default Configuration Overrides */
    "[go][makefile][shellscript]": {
        "editor.insertSpaces": false
    },
    "[dockerfile][latex][markdown][yaml]": {
        "editor.tabSize": 2
    },
    "[c][cpp]": {
        "editor.defaultFormatter": "ms-vscode.cpptools"
    },
    "[dockerfile]": {
        "editor.defaultFormatter": "ms-azuretools.vscode-docker"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[json][jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[latex][markdown][restructuredtext]": {
        "editor.detectIndentation": false,
        "editor.wordWrap": "bounded",
        "editor.renderWhitespace": "all"
    },
    "[latex]": {
        "editor.formatOnSave": false,
        "editor.suggestSelection": "recentlyUsedByPrefix"
    },
    "[markdown][restructuredtext]": {
        "editor.quickSuggestions": {
            "comments": "on",
            "strings": "on",
            "other": "on"
        },
        "editor.acceptSuggestionOnEnter": "off"
    },
    "[markdown]": {
        "editor.defaultFormatter": "yzhang.markdown-all-in-one"
    },
    "[python]": {
        "editor.formatOnSave": false,
        "editor.defaultFormatter": "ms-python.black-formatter"
    },
    "[restructuredtext]": {
        "editor.tabSize": 4
    },
    "[toml]": {
        "editor.defaultFormatter": "tamasfe.even-better-toml"
    },
    "[yaml]": {
        "editor.defaultFormatter": "redhat.vscode-yaml"
    },

    //! Extension settings */
    //* Azure Machine Learning */
    // "ai.homepage.openOnStartup": false,

    //* Better Comments */
    "better-comments.highlightPlainText": true,
    "better-comments.multilineComments": true,

    //* C/C++ */
    "C_Cpp.default.compilerPath": "gcc",
    "C_Cpp.default.cppStandard": "c++17",
    "C_Cpp.default.cStandard": "c11",
    "C_Cpp.default.intelliSenseMode": "gcc-x64",
    "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",
    "C_Cpp.intelliSenseEngine": "default",
    "C_Cpp.configurationWarnings": "enabled",
    "C_Cpp.autocomplete": "default",
    "C_Cpp.formatting": "clangFormat",
    "C_Cpp.workspaceSymbols": "All",
    "C_Cpp.clang_format_sortIncludes": false,
    "C_Cpp.clang_format_style": "file",
    "C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: Google, IndentWidth: 4, AccessModifierOffset: -3, ColumnLimit: 100, BinPackArguments: false, BinPackParameters: false }",
    "C_Cpp.codeAnalysis.clangTidy.enabled": true,
    "C_Cpp.codeAnalysis.clangTidy.useBuildPath": true,

    //* C/C++ Clang Command Adapter */
    "clang.executable": "clang",
    "clang.cflags": [
        "-std=c11"
    ],
    "clang.cxxflags": [
        "-std=c++17"
    ],
    "clang.objcflags": [],
    "clang.completion.completeMacros": true,
    "clang.completion.enable": true,
    "clang.diagnostic.enable": true,

    //* Clangd */
    "clangd.arguments": [
        "--compile-commands-dir=${workspaceFolder}/.vscode",
        "--all-scopes-completion",
        "--clang-tidy"
    ],
    "clangd.detectExtensionConflicts": false,

    //* Cmake Tools */
    "cmake.preferredGenerators": [
        "Unix Makefiles",
        "Ninja"
    ],
    "cmake.sourceDirectory": "${workspaceFolder}",
    "cmake.buildDirectory": "${workspaceFolder}/cmake-build-${variant:buildType}",
    "cmake.configureOnEdit": true,
    "cmake.clearOutputBeforeBuild": true,
    "cmake.saveBeforeBuild": true,
    "cmake.buildBeforeRun": true,
    "cmake.exportCompileCommandsFile": true,
    "cmake.copyCompileCommands": "${workspaceFolder}/.vscode/compile_commands.json",
    "cmake.pinnedCommands": [
        "workbench.action.tasks.configureTaskRunner",
        "workbench.action.tasks.runTask"
    ],
    "cmake.showOptionsMovedNotification": false,

    //* Code Runner */
    "code-runner.clearPreviousOutput": false,
    "code-runner.runInTerminal": true,
    "code-runner.saveAllFilesBeforeRun": true,
    "code-runner.saveFileBeforeRun": true,
    "code-runner.executorMap": {
        "javascript": "node",
        "java": "cd $dirWithoutTrailingSlash && javac \"$fileName\" && { java \"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "c": "cd $dirWithoutTrailingSlash && gcc \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "zig": "zig run",
        "cpp": "cd $dirWithoutTrailingSlash && g++ \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "objective-c": "cd $dirWithoutTrailingSlash && gcc -framework Cocoa \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "php": "php",
        "python": "$pythonPath -u \"$fullFileName\"",
        "perl": "perl",
        "perl6": "perl6",
        "ruby": "ruby",
        "go": "go run",
        "lua": "lua",
        "groovy": "groovy",
        "powershell": "powershell -ExecutionPolicy ByPass -File",
        "bat": "cmd /c",
        "shellscript": "bash",
        "fsharp": "fsi",
        "csharp": "scriptcs",
        "vbscript": "cscript //Nologo",
        "typescript": "ts-node",
        "coffeescript": "coffee",
        "scala": "scala",
        "swift": "swift",
        "julia": "julia",
        "crystal": "crystal",
        "ocaml": "ocaml",
        "r": "Rscript",
        "applescript": "osascript",
        "clojure": "lein exec",
        "haxe": "haxe --cwd $dirWithoutTrailingSlash --run \"$fileNameWithoutExt\"",
        "rust": "cd $dirWithoutTrailingSlash && rustc \"$fileName\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "racket": "racket",
        "scheme": "csi -script",
        "ahk": "autohotkey",
        "autoit": "autoit3",
        "dart": "dart",
        "pascal": "cd $dirWithoutTrailingSlash && fpc \"$fileName\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "d": "cd $dirWithoutTrailingSlash && dmd \"$fileName\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "haskell": "runghc",
        "nim": "nim compile --verbosity:0 --hints:off --run",
        "lisp": "sbcl --script",
        "kit": "kitc --run",
        "v": "v run",
        "sass": "sass --style expanded",
        "scss": "scss --style expanded",
        "less": "cd $dirWithoutTrailingSlash && lessc \"$fileName\" \"$fileNameWithoutExt.css\"",
        "FortranFreeForm": "cd $dirWithoutTrailingSlash && gfortran \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "fortran-modern": "cd $dirWithoutTrailingSlash && gfortran \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "fortran_fixed-form": "cd $dirWithoutTrailingSlash && gfortran \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "fortran": "cd $dirWithoutTrailingSlash && gfortran \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        "sml": "cd $dirWithoutTrailingSlash && sml \"$fileName\"",
        "mojo": "mojo run",
        "erlang": "escript",
        "spwn": "spwn build",
        "pkl": "cd $dirWithoutTrailingSlash && pkl eval -f yaml \"$fileName\" -o \"$fileNameWithoutExt\".yaml",
        "gleam": "gleam run -m \"$fileNameWithoutExt\""
    },
    "code-runner.executorMapByFileExtension": {
        ".vb": "cd $dirWithoutTrailingSlash && vbc /nologo \"$fileName\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        ".vbs": "cscript //Nologo",
        ".scala": "scala",
        ".jl": "julia",
        ".cr": "crystal",
        ".ml": "ocaml",
        ".zig": "zig run",
        ".exs": "elixir",
        ".hx": "haxe --cwd $dirWithoutTrailingSlash --run \"$fileNameWithoutExt\"",
        ".rkt": "racket",
        ".scm": "csi -script",
        ".ahk": "autohotkey",
        ".au3": "autoit3",
        ".kt": "cd $dirWithoutTrailingSlash && kotlinc \"$fileName\" -include-runtime -d \"$fileNameWithoutExt.jar\" && java -jar \"$fileNameWithoutExt.jar\"",
        ".kts": "kotlinc -script",
        ".dart": "dart",
        ".pas": "cd $dirWithoutTrailingSlash && fpc \"$fileName\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        ".pp": "cd $dirWithoutTrailingSlash && fpc \"$fileName\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        ".d": "cd $dirWithoutTrailingSlash && dmd \"$fileName\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        ".hs": "runhaskell",
        ".nim": "nim compile --verbosity:0 --hints:off --run",
        ".csproj": "dotnet run --project",
        ".fsproj": "dotnet run --project",
        ".lisp": "sbcl --script",
        ".kit": "kitc --run",
        ".v": "v run",
        ".vsh": "v run",
        ".sass": "sass --style expanded",
        ".cu": "cd $dirWithoutTrailingSlash && nvcc \"$fileName\" -o \"$fileNameWithoutExt\" && { ./\"$fileNameWithoutExt\"; rm \"$fileNameWithoutExt\" }",
        ".ring": "ring",
        ".sml": "cd $dirWithoutTrailingSlash && sml \"$fileName\"",
        ".mojo": "mojo run",
        ".erl": "escript",
        ".spwn": "spwn build",
        ".pkl": "cd $dirWithoutTrailingSlash && pkl eval -f yaml \"$fileName\" -o \"$fileNameWithoutExt\".yaml",
        ".gleam": "gleam run -m \"$fileNameWithoutExt\""
    },

    //* Code Spell Checker */
    "cSpell.language": "en,en-US",
    "cSpell.showStatus": false,

    //* Git */
    "git.enabled": true,
    "git.autoRepositoryDetection": true,
    "git.detectSubmodules": true,
    "git.confirmSync": true,
    "git.autoStash": true,
    "git.autorefresh": true,
    "git.autofetch": true,
    "git.pruneOnFetch": true,
    "git.pullTags": true,
    "git.replaceTagsWhenPull": true,

    //* Git Graph */
    "git-graph.repository.commits.order": "date",
    "git-graph.repository.showUncommittedChanges": true,
    "git-graph.repository.showTags": true,
    "git-graph.repository.showRemoteBranches": true,
    "git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,
    "git-graph.commitDetailsView.fileView.type": "File Tree",
    "git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,

    //* Git History */
    "gitHistory.hideCommitViewExplorer": false,
    "gitHistory.showEditorTitleMenuBarIcons": true,

    //* GitHub */
    "github.gitProtocol": "ssh",
    "github.codespaces.defaultExtensions": [
        "GitHub.codespaces",
        "GitHub.vscode-pull-request-github",
        "GitHub.copilot",
        "EditorConfig.EditorConfig",
        "mhutchie.git-graph",
        "donjayamanne.githistory",
        "eamodio.gitlens",
        "k--kato.intellij-idea-keybindings",
        "ryu1kn.partial-diff",
        "alefragnani.separators",
        "Gruntfuggly.todo-tree",
        "ms-python.python",
        "ms-python.vscode-pylance"
    ],
    "github.copilot.editor.enableAutoCompletions": true,
    "github.copilot.enable": {
        "*": true,
        "markdown": true,
        "plaintext": false,
        "scminput": false
    },

    //* GitHub Pull Requests and Issues */
    "githubPullRequests.defaultMergeMethod": "squash",
    "githubPullRequests.pullBranch": "never",
    "githubPullRequests.terminalLinksHandler": "github",

    //* GitLens */
    "gitlens.defaultTimeFormat": "HH:mm",
    "gitlens.defaultDateFormat": "MMMM Do, YYYY HH:mm",
    "gitlens.defaultDateShortFormat": "MMMM D, YYYY",
    "gitlens.advanced.messages": {
        "suppressIntegrationRequestTimedOutWarning": true
    },

    //* Go */
    "go.gopath": "/usr/local/opt/go",
    "go.goroot": "/usr/local/opt/go/libexec",
    "go.buildOnSave": "package",
    "go.lintOnSave": "package",
    "go.installDependenciesWhenBuilding": true,
    "go.useLanguageServer": true,

    //* Indent Rainbow */
    "indentRainbow.indicatorStyle": "light",
    "indentRainbow.colors": [
        "rgba(255,255,64,0.15)",
        "rgba(127,255,127,0.15)",
        "rgba(255,127,255,0.15)",
        "rgba(79,236,236,0.15)"
    ],
    "indentRainbow.errorColor": "rgba(128,32,32,0.2)",
    "indentRainbow.lightIndicatorStyleLineWidth": 2,
    "indentRainbow.updateDelay": 25,

    //* Java Extension Pack */
    "java.autobuild.enabled": true,
    "java.completion.enabled": true,
    "java.completion.guessMethodArguments": true,
    "java.signatureHelp.enabled": true,
    "java.format.enabled": true,
    "java.format.onType.enabled": true,
    "java.format.comments.enabled": true,
    "java.format.settings.profile": "GoogleStyle",
    "java.format.settings.url": "https://github.com/google/styleguide/raw/gh-pages/eclipse-java-google-style.xml",

    //* Kubernetes */
    "vs-kubernetes": {
        "vscode-kubernetes.helm-path-linux": "~/.local/state/vs-kubernetes/tools/helm/linux-amd64/helm",
        "vscode-kubernetes.kubectl-path-linux": "~/.local/state/vs-kubernetes/tools/kubectl/kubectl",
        "vscode-kubernetes.minikube-path-linux": "~/.local/state/vs-kubernetes/tools/minikube/linux-amd64/minikube"
    },

    //* LaTeX Workshop */
    "latex-workshop.intellisense.package.enabled": true,
    "latex-workshop.intellisense.unimathsymbols.enabled": true,
    "latex-workshop.latex.recipe.default": "lastUsed",
    "latex-workshop.latex.autoBuild.run": "onFileChange",
    "latex-workshop.latex.autoBuild.cleanAndRetry.enabled": true,
    "latex-workshop.latex.autoBuild.interval": 300000,
    "latex-workshop.latex.autoClean.run": "onFailed",
    "latex-workshop.latex.clean.method": "glob",
    "latex-workshop.latex.clean.subfolder.enabled": true,
    "latex-workshop.synctex.afterBuild.enabled": true,
    "latex-workshop.view.autoFocus.enabled": false,
    "latex-workshop.view.pdf.viewer": "tab",
    "latex-workshop.view.pdf.zoom": "page-width",
    "latex-workshop.view.pdf.trim": 0,
    "latex-workshop.view.pdf.external.viewer.command": "okular",
    "latex-workshop.view.pdf.external.viewer.args": [
        "--unique",
        "%PDF%"
    ],
    "latex-workshop.view.pdf.external.synctex.command": "okular",
    "latex-workshop.view.pdf.external.synctex.args": [
        "--noraise",
        "--unique",
        "%PDF%#src:%LINE%%TEX%"
    ],
    "latex-workshop.latex.outDir": "%DIR%/out",
    "latex-workshop.latex.magic.args": [
        "-synctex=1",
        "-shell-escape",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-output-directory=%OUTDIR%",
        "%DOC%"
    ],
    "latex-workshop.latex.magic.bib.args": [
        "--output-directory=%OUTDIR%",
        "%DOCFILE%"
    ],
    "latex-workshop.latex.tools": [
        {
            "name": "pdflatexmk",
            "command": "latexmk",
            "args": [
                "-pdflatex",
                "-synctex=1",
                "-shell-escape",
                "-interaction=nonstopmode",
                "-file-line-error",
                "-output-directory=%OUTDIR%",
                "%DOC%"
            ],
            "env": {}
        },
        {
            "name": "xelatexmk",
            "command": "latexmk",
            "args": [
                "-xelatex",
                "-synctex=1",
                "-shell-escape",
                "-interaction=nonstopmode",
                "-file-line-error",
                "-output-directory=%OUTDIR%",
                "%DOC%"
            ],
            "env": {}
        },
        {
            "name": "lualatexmk",
            "command": "latexmk",
            "args": [
                "-lualatex",
                "-synctex=1",
                "-shell-escape",
                "-interaction=nonstopmode",
                "-file-line-error",
                "-output-directory=%OUTDIR%",
                "%DOC%"
            ],
            "env": {}
        },
        {
            "name": "pdflatex",
            "command": "pdflatex",
            "args": [
                "-synctex=1",
                "-shell-escape",
                "-interaction=nonstopmode",
                "-file-line-error",
                "-output-directory=%OUTDIR%",
                "%DOC%"
            ],
            "env": {}
        },
        {
            "name": "xelatex",
            "command": "xelatex",
            "args": [
                "-synctex=1",
                "-shell-escape",
                "-interaction=nonstopmode",
                "-file-line-error",
                "-output-directory=%OUTDIR%",
                "%DOC%"
            ],
            "env": {}
        },
        {
            "name": "lualatex",
            "command": "lualatex",
            "args": [
                "-synctex=1",
                "-shell-escape",
                "-interaction=nonstopmode",
                "-file-line-error",
                "-output-directory=%OUTDIR%",
                "%DOC%"
            ],
            "env": {}
        },
        {
            "name": "biber",
            "command": "biber",
            "args": [
                "--output-directory=%OUTDIR%",
                "%DOCFILE%"
            ],
            "env": {}
        },
        {
            "name": "bibtex",
            "command": "bibtex",
            "args": [
                "out/%DOCFILE%"
            ],
            "env": {
                "BIBINPUTS": "%OUTDIR%:"
            }
        }
    ],
    "latex-workshop.latex.recipes": [
        {
            "name": "Latexmk (XeLaTeX)",
            "tools": [
                "xelatexmk"
            ]
        },
        {
            "name": "Latexmk (LuaLaTeX)",
            "tools": [
                "lualatexmk"
            ]
        },
        {
            "name": "Latexmk (PDFLaTeX)",
            "tools": [
                "pdflatexmk"
            ]
        },
        {
            "name": "XeLaTeX",
            "tools": [
                "xelatex"
            ]
        },
        {
            "name": "LuaLaTeX",
            "tools": [
                "lualatex"
            ]
        },
        {
            "name": "PDFLaTeX",
            "tools": [
                "pdflatex"
            ]
        },
        {
            "name": "Biber",
            "tools": [
                "biber"
            ]
        },
        {
            "name": "BibTeX",
            "tools": [
                "bibtex"
            ]
        },
        {
            "name": "XeLaTeX ➞ Biber ➞ XeLaTeX × 2",
            "tools": [
                "xelatex",
                "biber",
                "xelatex",
                "xelatex"
            ]
        },
        {
            "name": "LuaLaTeX ➞ Biber ➞ LuaLaTeX × 2",
            "tools": [
                "lualatex",
                "biber",
                "lualatex",
                "lualatex"
            ]
        },
        {
            "name": "PDFLaTeX ➞ Biber ➞ PDFLaTeX × 2",
            "tools": [
                "pdflatex",
                "biber",
                "pdflatex",
                "pdflatex"
            ]
        },
        {
            "name": "XeLaTeX ➞ BibTeX ➞ XeLaTeX × 2",
            "tools": [
                "xelatex",
                "bibtex",
                "xelatex",
                "xelatex"
            ]
        },
        {
            "name": "LuaLaTeX ➞ BibTeX ➞ LuaLaTeX × 2",
            "tools": [
                "lualatex",
                "bibtex",
                "lualatex",
                "lualatex"
            ]
        },
        {
            "name": "PDFLaTeX ➞ BibTeX ➞ PDFLaTeX × 2",
            "tools": [
                "pdflatex",
                "bibtex",
                "pdflatex",
                "pdflatex"
            ]
        }
    ],
    "latex-workshop.latexindent.args": [
        "-c",
        "%DIR%",
        "%TMPFILE%",
        "-y",
        "defaultIndent: '%INDENT%', verbatimEnvironments:nameAsRegex:name: '\\w+code\\*?'"
    ],
    "latex-workshop.latex.clean.fileTypes": [
        "*.xdv",
        "*.aux",
        "*.bbl",
        "*.bcf",
        "*.blg",
        "*.idx",
        "*.ind",
        "*.lof",
        "*.lot",
        "*.out",
        "*.toc",
        "*.acn",
        "*.acr",
        "*.alg",
        "*.glg",
        "*.glo",
        "*.gls",
        "*.ist",
        "*.fls",
        "*.log",
        "*.nav",
        "*.snm",
        "*.vrb",
        "*.run.xml",
        "*.fdb_latexmk",
        "*.synctex(busy)",
        "*.synctex.gz(busy)",
        "_minted-*/**",
        "_minted-*/"
    ],

    //* LaTeX Utilities */
    "latex-utilities.countWord.format": "${words} Words (${wordsBody} in Body)",
    "latex-utilities.countWord.args": [
        "-merge",
        "%DOC%"
    ],
    "latex-utilities.formattedPaste.tableBooktabsStyle": true,
    "latex-utilities.formattedPaste.image.template": "\\includegraphics[width=\\linewidth]{${imageFilePath}}",

    //* Live Share */
    "liveshare.alwaysFollowHost": false,
    "liveshare.connectionMode": "auto",
    "liveshare.autoShareTerminals": true,
    "liveshare.autoShareServers": true,
    "liveshare.codeLens": true,
    "liveshare.comments": true,
    "liveshare.nameTagVisibility": "Activity",
    "liveshare.showReadOnlyUsersInEditor": "whileFollowing",
    "liveshare.allowGuestTaskControl": true,
    "liveshare.allowGuestDebugControl": true,
    "liveshare.languages.allowGuestCommandControl": true,
    "liveshare.joinDebugSessionOption": "Automatic",
    "liveshare.populateGitCoAuthors": "always",
    "liveshare.showInStatusBar": "whileCollaborating",
    "liveshare.showVerboseNotifications": true,

    //* Local History */
    "local-history.enabled": 2,
    "local-history.absolute": false,
    "local-history.path": "${workspaceFolder}/.vscode",
    "local-history.saveDelay": 120,
    "local-history.daysLimit": 14,
    "local-history.treeLocation": "localHistory",

    //* Makefile Tools */
    "makefile.configureOnEdit": false,
    "makefile.configureOnOpen": false,

    //* Markdown All in One */
    "markdown.extension.list.indentationSize": "inherit",
    "markdown.extension.preview.autoShowPreviewToSide": false,
    "markdown.extension.orderedList.autoRenumber": true,
    "markdown.extension.tableFormatter.enabled": true,
    "markdown.extension.toc.updateOnSave": true,
    "markdown.extension.toc.levels": "2..6",
    "markdown.extension.toc.omittedFromToc": {
        "README.md": [
            "## Table of Contents"
        ]
    },

    //* PlantUML */
    "plantuml.jar": "/usr/local/opt/plantuml/libexec/plantuml.jar",
    "plantuml.previewAutoUpdate": true,
    "plantuml.render": "PlantUMLServer",
    "plantuml.server": "https://www.plantuml.com/plantuml",

    //* PowerShell */
    "powershell.codeFolding.enable": true,
    "powershell.codeFolding.showLastLine": true,
    "powershell.codeFormatting.preset": "Custom",
    "powershell.codeFormatting.useCorrectCasing": true,
    "powershell.codeFormatting.autoCorrectAliases": true,
    "powershell.codeFormatting.newLineAfterOpenBrace": true,
    "powershell.codeFormatting.newLineAfterCloseBrace": true,
    "powershell.codeFormatting.openBraceOnSameLine": true,
    "powershell.codeFormatting.ignoreOneLineBlock": true,
    "powershell.codeFormatting.addWhitespaceAroundPipe": true,
    "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
    "powershell.codeFormatting.pipelineIndentationStyle": "IncreaseIndentationForFirstPipeline",
    "powershell.codeFormatting.alignPropertyValuePairs": true,
    "powershell.codeFormatting.whitespaceAfterSeparator": true,
    "powershell.codeFormatting.whitespaceAroundOperator": true,
    "powershell.codeFormatting.whitespaceBeforeOpenBrace": true,
    "powershell.codeFormatting.whitespaceBeforeOpenParen": true,
    "powershell.codeFormatting.whitespaceBetweenParameters": true,
    "powershell.codeFormatting.whitespaceInsideBrace": true,
    "powershell.enableProfileLoading": true,
    "powershell.scriptAnalysis.enable": true,

    //* Python */
    "python.analysis.autoImportCompletions": true,
    "python.analysis.autoSearchPaths": true,
    "python.analysis.completeFunctionParens": true,
    "python.analysis.useLibraryCodeForTypes": true,
    "python.defaultInterpreterPath": "python3",
    "python.terminal.activateEnvironment": false,
    "python.languageServer": "Pylance",
    "debugpy.debugJustMyCode": false,
    "debugpy.showPythonInlineValues": true,
    "jupyter.interactiveWindow.cellMarker.default": "# %%",
    "jupyter.debugJustMyCode": false,
    "notebook.lineNumbers": "on",
    "notebook.cellToolbarVisibility": "hover",
    "notebook.showFoldingControls": "always",
    "black-formatter.importStrategy": "fromEnvironment",
    "black-formatter.args": [
        "--safe",
        "--line-length=100",
        "--skip-string-normalization"
    ],
    "isort.importStrategy": "fromEnvironment",
    "isort.args": [
        "--atomic",
        "--profile=black",
        "--line-length=100",
        "--lines-after-imports=2",
        "--remove-redundant-aliases",
        "--extra-builtin=typing_extensions"
    ],
    "flake8.importStrategy": "fromEnvironment",
    "flake8.args": [
        "--max-line-length=120",
        "--max-doc-length=120"
    ],
    "pylint.importStrategy": "fromEnvironment",
    "pylint.args": [
        "--generated-members=numpy.*,torch.*",
        "--max-line-length=120"
    ],
    "ruff.importStrategy": "fromEnvironment",
    "ruff.lint.args": [
        "--line-length=100"
    ],
    "ruff.organizeImports": false,
    "mypy-type-checker.importStrategy": "fromEnvironment",
    "mypy-type-checker.preferDaemon": true,
    "mypy-type-checker.reportingScope": "workspace",
    "mypy-type-checker.args": [
        "--warn-redundant-casts",
        "--warn-unused-ignores",
        "--show-error-context",
        "--show-error-end",
        "--show-error-code-links",
        "--pretty",
        "--exclude='^(.*/)?setup\\.py$'",
        "--exclude='^(.*/)?test_.*\\.py$'",
        "--exclude='^(.*/)?test/.*\\.py$'",
        "--exclude='^(.*/)?tests/.*\\.py$'",
    ],

    //* Remote */
    "remote.SSH.connectTimeout": 300,
    "remote.SSH.defaultExtensions": [
        "ms-ceintl.vscode-language-pack-zh-hans",
        "formulahendry.code-runner",
        "streetsidesoftware.code-spell-checker",
        "eamodio.gitlens",
        "mhutchie.git-graph",
        "donjayamanne.githistory",
        "xyz.local-history",
        "gruntfuggly.todo-tree",
        "yzhang.markdown-all-in-one",
        "ryu1kn.partial-diff",
        "christian-kohler.path-intellisense",
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter"
    ],

    //* reStructuredText */
    "restructuredtext.languageServer.disabled": true,
    "esbonio.server.enabled": false,

    //* Shellcheck */
    "shellcheck.enable": true,
    "shellcheck.enableQuickFix": true,
    "shellcheck.run": "onSave",
    "shellcheck.customArgs": [
        "--shell=bash",
        "--enable=all"
    ],

    //* Shell-format */
    "shellformat.flag": "-i 0 -ci",

    //* Tabnine */
    "tabnine.codeLensEnabled": false,
    "tabnine.experimentalAutoImports": true,

    //* Todo Tree */
    "todo-tree.general.tags": [
        "BUG",
        "HACK",
        "FIXME",
        "TODO",
        "XXX",
        "[ ]",
        "[x]"
    ],
    "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
}
